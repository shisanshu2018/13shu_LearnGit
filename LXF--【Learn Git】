【Learn Git】
# 在Linux上安装Git 
命令安装 : sudo apt-get install git 
源码安装 : ./config,  
            make ,
            sudo make install

# 创建你的ID  就是属于你的仓库的门牌号
git --config --global user.name "Your name"  #创建门牌号
git --config --global user.email "Your email"

# 创建版本库 create repository
mkdir learngit 
git init 

# 创建远程仓库 在github上
注册GitHub账号,你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的
所以：
第1步：创建SSH Key
linux 上开shell / windows 打开 gitbash 

ssh-keygen -t rsa -C "youremail@example.com"

一路回车 

如果一切顺利的话，(/c/Users/JOY/.ssh/id_rsa) 在默认目录 即
可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人

第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：

然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容 


在本地仓库 输入
 git remote add origin git@github.com:shisanshu2018/learngit.git 

 添加后 远程库就叫origin 


 就可以把本地库的所有内容推送到远程库上

 git push -u origin master 
 #第一次由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。

 就直接 git push origin master  把本地代码推到远程master分支上

 git pull origin master 把远程代码更新到本地上


 #把远程库 导到本地

 git clone git@github.com:shisanshu2018/gitskills.git 

 # 创建与合并分支
 git checkout -b dev  表示创建并切换：相当于 git branch dev
                                             git check dev

用 git branch 来查看当前分支 
git merge 命令用于合并指定分支到当前分支
比如你在dev分支上修改了readme.txt ,你的主分支是master
你可以git checkout master 切换到主分支上
 然后 git merge dev 并指定分支到当前分支

 创建与合并分支

阅读: 626543
在版本回退里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。

一开始的时候，master分支是一条线，Git用master指向最新的提交，再用HEAD指向master，就能确定当前分支，以及当前分支的提交点：

git-br-initial

每次提交，master分支都会向前移动一步，这样，随着你不断提交，master分支的线也越来越长：


0:19

 当我们创建新的分支，例如dev时，Git新建了一个指针叫dev，指向master相同的提交，再把HEAD指向dev，就表示当前分支在dev上：

git-br-create

你看，Git创建一个分支很快，因为除了增加一个dev指针，改改HEAD的指向，工作区的文件都没有任何变化！

不过，从现在开始，对工作区的修改和提交就是针对dev分支了，比如新提交一次后，dev指针往前移动一步，而master指针不变：

git-br-dev-fd

假如我们在dev上的工作完成了，就可以把dev合并到master上。Git怎么合并呢？最简单的方法，就是直接把master指向dev的当前提交，就完成了合并：

git-br-ff-merge

所以Git合并分支也很快！就改改指针，工作区内容也不变！

合并完分支后，甚至可以删除dev分支。删除dev分支就是把dev指针给删掉，删掉后，我们就剩下了一条master分支：

git-br-rm

真是太神奇了，你看得出来有些提交是通过分支完成的吗？



 下面开始实战。

首先，我们创建dev分支，然后切换到dev分支：

$ git checkout -b dev
Switched to a new branch 'dev'
git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：

$ git branch dev
$ git checkout dev
Switched to branch 'dev'
然后，用git branch命令查看当前分支：

$ git branch
* dev
  master
git branch命令会列出所有分支，当前分支前面会标一个*号。

然后，我们就可以在dev分支上正常提交，比如对readme.txt做个修改，加上一行：

Creating a new branch is quick.
然后提交：

$ git add readme.txt 
$ git commit -m "branch test"
[dev fec145a] branch test
 1 file changed, 1 insertion(+)
现在，dev分支的工作完成，我们就可以切换回master分支：

$ git checkout master
Switched to branch 'master'
切换回master分支后，再查看一个readme.txt文件，刚才添加的内容不见了！因为那个提交是在dev分支上，而master分支此刻的提交点并没有变：

git-br-on-master

现在，我们把dev分支的工作成果合并到master分支上：

$ git merge dev
Updating d17efd8..fec145a
Fast-forward
 readme.txt |    1 +
 1 file changed, 1 insertion(+)
git merge命令用于合并指定分支到当前分支。合并后，再查看readme.txt的内容，就可以看到，和dev分支的最新提交是完全一样的。

注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。

当然，也不是每次合并都能Fast-forward，我们后面会讲其他方式的合并。

合并完成后，就可以放心地删除dev分支了：

$ git branch -d dev
Deleted branch dev (was fec145a).
删除后，查看branch，就只剩下master分支了：

$ git branch
* master
因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在master分支上工作效果是一样的，但过程更安全。

小结

Git鼓励大量使用分支：

查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>

创建+切换分支：git checkout -b <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>   / - D 是强制删除

 git tag v1.0  代码版本标签

 commit ID很长 通常只需要写出前8位就OK
 git tag stable-1 8c315325





=================================================================
•git config：配置相关信息
•git clone：复制仓库
•git init：初始化仓库
•git add：添加更新内容到索引中
•git diff：比较内容
•git status：获取当前项目状况
•git commit：提交
•git branch：分支相关
•git checkout：切换分支
•git merge：合并分支
•git reset：恢复版本
•git log：查看日志
 git tag 查看标签 

=================================================================================
========================   Git中阶   =================================================

忽略文件 


项目中经常会生成一些Git系统不需要追踪(track)的文件。典型的是在编译生成过程中产生的文件或是编程器生成的临时备份文件。
当然，你不追踪(track)这些文件，可以 平时不用"git add"去把它们加到索引中。 但是这样会很快变成一件烦人的事，你发现 项目中到处有未追踪(untracked)的文件; 
这样也使"git add ." 和"git commit -a" 变得实际上没有用处，同时"git status"命令的输出也会有它们。 你可以在你的顶层工作目录中添加一个叫".gitignore"的文件，
来告诉Git系统要忽略掉哪些文件，
下面是文件内容的示例: 以'#' 开始的行，被视为注释。 忽略掉所有文件名是 foo.txt 的文件。









